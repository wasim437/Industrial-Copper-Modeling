{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51150683-2b97-42f0-8553-8db74a9c4171",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting my_app2.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile my_app2.py\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "import streamlit as st\n",
    "import re\n",
    "st.set_page_config(layout=\"wide\")\n",
    "\n",
    "st.write(\"\"\"\n",
    "<div style='text-align:center'>\n",
    "    <h1 style='color:#009999;'>Industrial Copper Modeling Application</h1>\n",
    "</div>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "tab1, tab2 = st.tabs([\"PREDICT SELLING PRICE\", \"PREDICT STATUS\"]) \n",
    "with tab1:    \n",
    "        \n",
    "\n",
    "        # Define the possible values for the dropdown menus\n",
    "        status_options = ['Won', 'Draft', 'To be approved', 'Lost', 'Not lost for AM', 'Wonderful', 'Revised', 'Offered', 'Offerable']\n",
    "        item_type_options = ['W', 'WI', 'S', 'Others', 'PL', 'IPL', 'SLAWR']\n",
    "        country_options = [28., 25., 30., 32., 38., 78., 27., 77., 113., 79., 26., 39., 40., 84., 80., 107., 89.]\n",
    "        application_options = [10., 41., 28., 59., 15., 4., 38., 56., 42., 26., 27., 19., 20., 66., 29., 22., 40., 25., 67., 79., 3., 99., 2., 5., 39., 69., 70., 65., 58., 68.]\n",
    "        product=['611112', '611728', '628112', '628117', '628377', '640400', '640405', '640665', \n",
    "                     '611993', '929423819', '1282007633', '1332077137', '164141591', '164336407', \n",
    "                     '164337175', '1665572032', '1665572374', '1665584320', '1665584642', '1665584662', \n",
    "                     '1668701376', '1668701698', '1668701718', '1668701725', '1670798778', '1671863738', \n",
    "                     '1671876026', '1690738206', '1690738219', '1693867550', '1693867563', '1721130331', '1722207579']\n",
    "\n",
    "        # Define the widgets for user input\n",
    "        with st.form(\"my_form\"):\n",
    "            col1,col2,col3=st.columns([5,2,5])\n",
    "            with col1:\n",
    "                st.write(' ')\n",
    "                status = st.selectbox(\"Status\", status_options,key=1)\n",
    "                item_type = st.selectbox(\"Item Type\", item_type_options,key=2)\n",
    "                country = st.selectbox(\"Country\", sorted(country_options),key=3)\n",
    "                application = st.selectbox(\"Application\", sorted(application_options),key=4)\n",
    "                product_ref = st.selectbox(\"Product Reference\", product,key=5)\n",
    "            with col3:               \n",
    "                st.write( f'<h5 style=\"color:rgb(0, 153, 153,0.4);\">NOTE: Min & Max given for reference, you can enter any value</h5>', unsafe_allow_html=True )\n",
    "                quantity_tons = st.text_input(\"Enter Quantity Tons (Min:611728 & Max:1722207579)\")\n",
    "                thickness = st.text_input(\"Enter thickness (Min:0.18 & Max:400)\")\n",
    "                width = st.text_input(\"Enter width (Min:1, Max:2990)\")\n",
    "                customer = st.text_input(\"customer ID (Min:12458, Max:30408185)\")\n",
    "                submit_button = st.form_submit_button(label=\"PREDICT SELLING PRICE\")\n",
    "                st.markdown(\"\"\"\n",
    "                    <style>\n",
    "                    div.stButton > button:first-child {\n",
    "                        background-color: #009999;\n",
    "                        color: white;\n",
    "                        width: 100%;\n",
    "                    }\n",
    "                    </style>\n",
    "                \"\"\", unsafe_allow_html=True)\n",
    "    \n",
    "            flag=0 \n",
    "            pattern = \"^(?:\\d+|\\d*\\.\\d+)$\"\n",
    "            for i in [quantity_tons,thickness,width,customer]:             \n",
    "                if re.match(pattern, i):\n",
    "                    pass\n",
    "                else:                    \n",
    "                    flag=1  \n",
    "                    break\n",
    "            \n",
    "        if submit_button and flag==1:\n",
    "            if len(i)==0:\n",
    "                st.write(\"please enter a valid number space not allowed\")\n",
    "            else:\n",
    "                st.write(\"You have entered an invalid value: \",i)  \n",
    "             \n",
    "        if submit_button and flag==0:\n",
    "            \n",
    "            import pickle\n",
    "            with open(r\"model.pkl\", 'rb') as file:\n",
    "                loaded_model = pickle.load(file)\n",
    "            with open(r'scaler.pkl', 'rb') as f:\n",
    "                scaler_loaded = pickle.load(f)\n",
    "\n",
    "            with open(r\"t.pkl\", 'rb') as f:\n",
    "                t_loaded = pickle.load(f)\n",
    "\n",
    "            with open(r\"s.pkl\", 'rb') as f:\n",
    "                s_loaded = pickle.load(f)\n",
    "\n",
    "            new_sample= np.array([[np.log(float(quantity_tons)),application,np.log(float(thickness)),float(width),country,float(customer),int(product_ref),item_type,status]])\n",
    "            new_sample_ohe = t_loaded.transform(new_sample[:, [7]]).toarray()\n",
    "            new_sample_be = s_loaded.transform(new_sample[:, [8]]).toarray()\n",
    "            new_sample = np.concatenate((new_sample[:, [0,1,2, 3, 4, 5, 6,]], new_sample_ohe, new_sample_be), axis=1)\n",
    "            new_sample1 = scaler_loaded.transform(new_sample)\n",
    "            new_pred = loaded_model.predict(new_sample1)[0]\n",
    "            st.write('## :green[Predicted selling price:] ', np.exp(new_pred))\n",
    "            \n",
    "with tab2: \n",
    "    \n",
    "        with st.form(\"my_form1\"):\n",
    "            col1,col2,col3=st.columns([5,1,5])\n",
    "            with col1:\n",
    "                cquantity_tons = st.text_input(\"Enter Quantity Tons (Min:611728 & Max:1722207579)\")\n",
    "                cthickness = st.text_input(\"Enter thickness (Min:0.18 & Max:400)\")\n",
    "                cwidth = st.text_input(\"Enter width (Min:1, Max:2990)\")\n",
    "                ccustomer = st.text_input(\"customer ID (Min:12458, Max:30408185)\")\n",
    "                cselling = st.text_input(\"Selling Price (Min:1, Max:100001015)\") \n",
    "              \n",
    "            with col3:    \n",
    "                st.write(' ')\n",
    "                citem_type = st.selectbox(\"Item Type\", item_type_options,key=21)\n",
    "                ccountry = st.selectbox(\"Country\", sorted(country_options),key=31)\n",
    "                capplication = st.selectbox(\"Application\", sorted(application_options),key=41)  \n",
    "                cproduct_ref = st.selectbox(\"Product Reference\", product,key=51)           \n",
    "                csubmit_button = st.form_submit_button(label=\"PREDICT STATUS\")\n",
    "    \n",
    "            cflag=0 \n",
    "            pattern = \"^(?:\\d+|\\d*\\.\\d+)$\"\n",
    "            for k in [cquantity_tons,cthickness,cwidth,ccustomer,cselling]:             \n",
    "                if re.match(pattern, k):\n",
    "                    pass\n",
    "                else:                    \n",
    "                    cflag=1  \n",
    "                    break\n",
    "            \n",
    "        if csubmit_button and cflag==1:\n",
    "            if len(k)==0:\n",
    "                st.write(\"please enter a valid number space not allowed\")\n",
    "            else:\n",
    "                st.write(\"You have entered an invalid value: \",k)  \n",
    "             \n",
    "        if csubmit_button and cflag==0:\n",
    "            import pickle\n",
    "            with open(r\"cmodel.pkl\", 'rb') as file:\n",
    "                cloaded_model = pickle.load(file)\n",
    "\n",
    "            with open(r'cscaler.pkl', 'rb') as f:\n",
    "                cscaler_loaded = pickle.load(f)\n",
    "\n",
    "            with open(r\"ct.pkl\", 'rb') as f:\n",
    "                ct_loaded = pickle.load(f)\n",
    "\n",
    "            # Predict the status for a new sample\n",
    "            # 'quantity tons_log', 'selling_price_log','application', 'thickness_log', 'width','country','customer','product_ref']].values, X_ohe\n",
    "            new_sample = np.array([[np.log(float(cquantity_tons)), np.log(float(cselling)), capplication, np.log(float(cthickness)),float(cwidth),ccountry,int(ccustomer),int(product_ref),citem_type]])\n",
    "            new_sample_ohe = ct_loaded.transform(new_sample[:, [8]]).toarray()\n",
    "            new_sample = np.concatenate((new_sample[:, [0,1,2, 3, 4, 5, 6,7]], new_sample_ohe), axis=1)\n",
    "            new_sample = cscaler_loaded.transform(new_sample)\n",
    "            new_pred = cloaded_model.predict(new_sample)\n",
    "            if new_pred==1:\n",
    "                st.write('## :green[The Status is Won] ')\n",
    "            else:\n",
    "                st.write('## :red[The status is Lost] ')\n",
    "                \n",
    "st.write( f'<h6 style=\"color:rgb(0, 153, 153,0.35);\">App Created by TulasiNND</h6>', unsafe_allow_html=True )  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32a89049-6a80-49a7-b374-fb40d66f8ef8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "943204bb-0e09-48cb-a588-2af7958cac30",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
